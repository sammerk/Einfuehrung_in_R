---
title: 'Eine Einführung in {{< fa brands r-project >}} '
subtitle: "Data Import, Wrangling & Visualisierung"
author: "Samuel Merk"
format: 
  revealjs:
    title-slide-attributes:
      data-background-image: img/sash.svg
      data-background-size: 30%
      data-background-position: 0 0
    slide-number: true
    controls: true
    logo: https://drive.google.com/uc?export=view&id=1Eoy1slqV_DDgG50f3V6tc6QvFnhCBE1H
    footer: "Folien unter https://bit.ly/merk050"
    theme: [dark, css/custom.scss]
    chalkboard:
      theme: whiteboard
      boardmarker-width: 3
      buttons: true
      chalk-effect: 0
    fullscreen: true
    pdfexport: true
---
## Willkommen zum [{{< fa brands r-project >}}]{.imp}-Workshop
```{r hidden chunk which creates template stuff}
#| echo: false

library(fontawesome)
library(tidyverse)
# Change css to lecker PH green
if(!dir.exists("css"))
dir.create("css")
fileConn<-file("css/custom.scss")
writeLines(c("/*-- scss:defaults --*/",
             "$link-color: #8cd000 !default;"), fileConn)
close(fileConn)

# create sash with URL
sash <- 
  ggplot() + 
  geom_polygon(data = tibble(x = c(0,4,5.5,0),
                             y = c(1,5,5,-.5)),
               aes(x,y), fill = "#8cd000") + 
  coord_fixed() +
  annotate(geom = "text", 
           label = "www.ph-ka.de", 
           x = .8, y = .8, 
           angle = 45,
           hjust = 0, vjust = 0,
           size = 17,
           color = "white") +
 theme_void() + 
 theme(plot.margin = margin(-2,0,0,-12, unit = "cm"))
ggsave("img/sash.svg", sash)
```


```{css}
.imp {
  color: #8cd000;
}
```

1) Vorstellungsrunde & Erwartungsabklärung
2) Seminarmodus
3) Fundamentals of [{{< fa brands r-project >}}]{.imp}
4) Data import
5) Data Wrangling
6) Data Viz

## {.center}

::: {.fragment .highlight-green}
<center>
<font style='font-size:5em'>{{< fa comments >}}</font><br>
<font style='font-size:1.3em'>Vorstellungsrunde </font>
</center>
:::

## Seminarmodus
::: {.incremental}
* Anleitung zum selbst le{{< fa brands r-project >}}nen
    * Hands-On
    * Ausgangspunkte für erfolgreiches Problemlösen
    * Wiederholtes Üben
* Wechsel von induktivem & deduktivem Lernen
* Interaktivität
* Adaptivität
* Folien ~~zur Dokumentation~~ als Wegweiser
:::

## {.center}

::: {.fragment .highlight-green}
<center>
<font style='font-size:2em'>Fundamentals of {{< fa brands r-project >}}</font>
</center>
:::

## Fundamentals of {{< fa brands r-project >}} {.smaller}
* Arithmetische Operationen
* Logische Vergleichsoperatoren
* Variablenzuweisung
* Einige Datentypen in R
* Polymorphie in R
* Vektoren
* Modularität mittels Bibliotheken
* Dataframes

::: aside
Unter [https://apps.samuel-merk.de/Einfuehrung-in-R](https://apps.samuel-merk.de/Einfuehrung-in-R) habe ich  ein Interaktives Tutorial für diese Fundamentals <br>programmiert  [(Vorschau {{< fa  external-link >}})](https://apps.samuel-merk.de/Einfuehrung-in-R){preview-link="true"}.
:::

## RStudio als IDE
Wichtige Begriffe:

* Console
* Script
* Workspace
* Working Directory
* History
* Relative/Absolute Pfade
* RStudio-Project

## Data Import {.center}

## Data Import {.smaller}
* Proprietäre Datenformate
    * SPSS `.sav` importierbar mit `haven::read_sav()`
    * STATA `.dta` importierbar mit `haven::read_stata()`
* Textbasierte Formate
    * Delimitersepariert `.tsv`, `.ssv` etc. importierbar `readr::read_delim()`
        * Kommasepariert `.csv` importierbar mit `read.csv()` oder `readr::read_csv()`
* R-Objekte:
    * Beliebige Objekte als `.RData` importierbar

## Meet the penguins ![](https://raw.githubusercontent.com/quarto-dev/quarto-web/main/docs/get-started/hello/rstudio/lter_penguins.png){style="float:right;" fig-alt="Illustration of three species of Palmer Archipelago penguins: Chinstrap, Gentoo, and Adelie. Artwork by @allison_horst." width="240"} {.smaller}


```{r}
#| echo: true

library(palmerpenguins)
library(knitr)
penguins |> 
  head() |> 
  kable()
```


## Data Import - Übung {.smaller}
```{r}
#| echo: false
#| results: hide
adelie_penguins <- 
  palmerpenguins::penguins |> 
  mutate(Identifier = 1:n()) |> 
  select(-body_mass_g) |> 
  filter(species == "Adelie")

save(adelie_penguins, file = "data/Adelie_Penguins.RData")

palmerpenguins::penguins |> 
  mutate(Identifier = 1:n()) |> 
  select(-body_mass_g) |> 
  filter(species != "Adelie") |> 
  write_csv( "data/NonAdelie_Penguins.csv")

palmerpenguins::penguins |> 
  mutate(Identifier = 1:n()) |> 
  select(Identifier, body_mass_g) |> 
  write_tsv("data/Penguins_body_mass.tsv")
```

[**Arbeitsauftrag:**]{.imp}

* Erstellen Sie ein neues, leeres RStudioprojekt mit dem Titel `Data Import Uebung`. Erstellen Sie einen Unterordner `data`. 
* Speichern Sie dort die drei Dateien, die Sie `r xfun::embed_file("data/Adelie_Penguins.RData", "Adelie_Penguins.RData", "hier")`, `r xfun::embed_file("data/NonAdelie_Penguins.csv", "NonAdelie_Penguins.csv", "hier")` und `r xfun::embed_file("data/Penguins_body_mass.tsv", "Penguins_body_mass.tsv", "hier")` herunterladen können. 
* Erstellen Sie ein Skript namens `Mein erster Data Import` und speichern Sie es in Ihrem Working Directory.
* Schreiben Sie kommentierte Syntax in dieses Skript, welche die beiden Datensätze importiert.

## Data Wrangling {.center}

## Data Wrangling {.smaller}
* Single Data Verbs
    * `filter()`
    * `select()`
    * `mutate()`
    * `summarize()`
* Multi Data Verbs
    * `full_join()`
    * `left_join()`
    * `right_join()`
    
## Data Import & Wrangling - Übung
```{r}
#| echo: false
#| results: hide

library(gapminder)

gapminder_50ties <- 
  gapminder |> 
  filter(year < 1960)

save(gapminder_50ties, file = "data/gapminder_50ties.RData")

gapminder |> 
  select(-lifeExp) |> 
  filter(year >= 1960) |> 
  write_csv( "data/gapminder_non50ties.csv")

gapminder |> 
  select(country, continent, year, lifeExp) |> 
  filter(year >= 1960) |> 
  write_csv( "data/gapminder_non50ties_lifeExp.csv")
```

[**Arbeitsauftrag:**]{.imp}

* Erstellen Sie ein neues, leeres RStudioprojekt mit dem Titel `Gapminder`. Erstellen Sie einen Unterordner `data`. 
* Speichern Sie dort die drei Dateien, die Sie `r xfun::embed_file("data/gapminder_50ties.RData", "gapminder_50ties.RData", "hier")`, `r xfun::embed_file("data/gapminder_non50ties.csv", "gapminder_non50ties.csv", "hier")` und `r xfun::embed_file("data/gapminder_non50ties_lifeExp.csv", "gapminder_non50ties_lifeExp.csv", "hier")` herunterladen können. 
* Erstellen Sie ein Skript namens `Gapminder Data Import und Wrangling` und speichern Sie es in Ihrem Working Directory.
* Schreiben Sie kommentierte Syntax in dieses Skript, welche die beiden Datensätze importiert.


## Data Visualization {.center}

## Wiederholung alles erlenten {.smaller}
```{r}
#| echo: false
#| results: hide

library(AER)
data(STAR)
write_csv(STAR, "data/STAR.csv")
```

[**Arbeitsauftrag:**]{.imp}

* Erstellen Sie ein neues, leeres RStudioprojekt mit dem Titel `STAR - Classroomsize Reduction`. Erstellen Sie einen Unterordner `data`. 
* Speichern Sie dort die Datei, die Sie `r xfun::embed_file("data/STAR.csv", "STAR.csv", "hier")` herunterladen können. 
* Erstellen Sie ein Skript namens `STAR Data Import, Wrangling und Visualisierung` und speichern Sie es in Ihrem RStudio Project auf der obersten Ebene
* Schreiben Sie kommentierte Syntax in dieses Skript, welche Effekte der Klassengröße auf die Leistung visualisiert.

